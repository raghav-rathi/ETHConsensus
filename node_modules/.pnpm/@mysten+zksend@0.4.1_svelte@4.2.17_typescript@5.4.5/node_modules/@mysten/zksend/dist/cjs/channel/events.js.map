{
  "version": 3,
  "sources": ["../../../src/channel/events.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Output } from 'valibot';\nimport { literal, object, optional, string, url, uuid, variant } from 'valibot';\n\nexport const ZkSendRequestData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction-block'),\n\t\tdata: string('`data` is required'),\n\t\taddress: string('`address` is required'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string('`bytes` is required'),\n\t\taddress: string('`address` is required'),\n\t}),\n]);\nexport type ZkSendRequestData = Output<typeof ZkSendRequestData>;\n\nexport const ZkSendRequest = object({\n\tid: string('`id` is required', [uuid()]),\n\torigin: string([url('`origin` must be a valid URL')]),\n\tname: optional(string()),\n\tpayload: ZkSendRequestData,\n});\n\nexport type ZkSendRequest = Output<typeof ZkSendRequest>;\n\nexport const ZkSendResponseData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t\taddress: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction-block'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n]);\nexport type ZkSendResponseData = Output<typeof ZkSendResponseData>;\n\nexport const ZkSendResponsePayload = variant('type', [\n\tobject({\n\t\ttype: literal('reject'),\n\t}),\n\tobject({\n\t\ttype: literal('resolve'),\n\t\tdata: ZkSendResponseData,\n\t}),\n]);\nexport type ZkSendResponsePayload = Output<typeof ZkSendResponsePayload>;\n\nexport const ZkSendResponse = object({\n\tid: string([uuid()]),\n\tsource: literal('zksend-channel'),\n\tpayload: ZkSendResponsePayload,\n});\nexport type ZkSendResponse = Output<typeof ZkSendResponse>;\n\nexport type ZkSendRequestTypes = Record<string, any> & {\n\t[P in ZkSendRequestData as P['type']]: P;\n};\n\nexport type ZkSendResponseTypes = {\n\t[P in ZkSendResponseData as P['type']]: P;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,qBAAsE;AAE/D,MAAM,wBAAoB,wBAAQ,QAAQ;AAAA,MAChD,uBAAO;AAAA,IACN,UAAM,wBAAQ,SAAS;AAAA,EACxB,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,wBAAwB;AAAA,IACtC,UAAM,uBAAO,oBAAoB;AAAA,IACjC,aAAS,uBAAO,uBAAuB;AAAA,EACxC,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,uBAAuB;AAAA,IACrC,WAAO,uBAAO,qBAAqB;AAAA,IACnC,aAAS,uBAAO,uBAAuB;AAAA,EACxC,CAAC;AACF,CAAC;AAGM,MAAM,oBAAgB,uBAAO;AAAA,EACnC,QAAI,uBAAO,oBAAoB,KAAC,qBAAK,CAAC,CAAC;AAAA,EACvC,YAAQ,uBAAO,KAAC,oBAAI,8BAA8B,CAAC,CAAC;AAAA,EACpD,UAAM,6BAAS,uBAAO,CAAC;AAAA,EACvB,SAAS;AACV,CAAC;AAIM,MAAM,yBAAqB,wBAAQ,QAAQ;AAAA,MACjD,uBAAO;AAAA,IACN,UAAM,wBAAQ,SAAS;AAAA,IACvB,aAAS,uBAAO;AAAA,EACjB,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,wBAAwB;AAAA,IACtC,WAAO,uBAAO;AAAA,IACd,eAAW,uBAAO;AAAA,EACnB,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,uBAAuB;AAAA,IACrC,WAAO,uBAAO;AAAA,IACd,eAAW,uBAAO;AAAA,EACnB,CAAC;AACF,CAAC;AAGM,MAAM,4BAAwB,wBAAQ,QAAQ;AAAA,MACpD,uBAAO;AAAA,IACN,UAAM,wBAAQ,QAAQ;AAAA,EACvB,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,SAAS;AAAA,IACvB,MAAM;AAAA,EACP,CAAC;AACF,CAAC;AAGM,MAAM,qBAAiB,uBAAO;AAAA,EACpC,QAAI,uBAAO,KAAC,qBAAK,CAAC,CAAC;AAAA,EACnB,YAAQ,wBAAQ,gBAAgB;AAAA,EAChC,SAAS;AACV,CAAC;",
  "names": []
}
