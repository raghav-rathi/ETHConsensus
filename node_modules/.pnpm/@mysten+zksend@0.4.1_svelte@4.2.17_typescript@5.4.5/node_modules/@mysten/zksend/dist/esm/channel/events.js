import { literal, object, optional, string, url, uuid, variant } from "valibot";
const ZkSendRequestData = variant("type", [
  object({
    type: literal("connect")
  }),
  object({
    type: literal("sign-transaction-block"),
    data: string("`data` is required"),
    address: string("`address` is required")
  }),
  object({
    type: literal("sign-personal-message"),
    bytes: string("`bytes` is required"),
    address: string("`address` is required")
  })
]);
const ZkSendRequest = object({
  id: string("`id` is required", [uuid()]),
  origin: string([url("`origin` must be a valid URL")]),
  name: optional(string()),
  payload: ZkSendRequestData
});
const ZkSendResponseData = variant("type", [
  object({
    type: literal("connect"),
    address: string()
  }),
  object({
    type: literal("sign-transaction-block"),
    bytes: string(),
    signature: string()
  }),
  object({
    type: literal("sign-personal-message"),
    bytes: string(),
    signature: string()
  })
]);
const ZkSendResponsePayload = variant("type", [
  object({
    type: literal("reject")
  }),
  object({
    type: literal("resolve"),
    data: ZkSendResponseData
  })
]);
const ZkSendResponse = object({
  id: string([uuid()]),
  source: literal("zksend-channel"),
  payload: ZkSendResponsePayload
});
export {
  ZkSendRequest,
  ZkSendRequestData,
  ZkSendResponse,
  ZkSendResponseData,
  ZkSendResponsePayload
};
//# sourceMappingURL=events.js.map
