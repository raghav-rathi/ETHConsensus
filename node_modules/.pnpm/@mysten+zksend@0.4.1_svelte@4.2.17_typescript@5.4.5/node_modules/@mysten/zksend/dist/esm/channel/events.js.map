{
  "version": 3,
  "sources": ["../../../src/channel/events.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Output } from 'valibot';\nimport { literal, object, optional, string, url, uuid, variant } from 'valibot';\n\nexport const ZkSendRequestData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction-block'),\n\t\tdata: string('`data` is required'),\n\t\taddress: string('`address` is required'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string('`bytes` is required'),\n\t\taddress: string('`address` is required'),\n\t}),\n]);\nexport type ZkSendRequestData = Output<typeof ZkSendRequestData>;\n\nexport const ZkSendRequest = object({\n\tid: string('`id` is required', [uuid()]),\n\torigin: string([url('`origin` must be a valid URL')]),\n\tname: optional(string()),\n\tpayload: ZkSendRequestData,\n});\n\nexport type ZkSendRequest = Output<typeof ZkSendRequest>;\n\nexport const ZkSendResponseData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t\taddress: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction-block'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n]);\nexport type ZkSendResponseData = Output<typeof ZkSendResponseData>;\n\nexport const ZkSendResponsePayload = variant('type', [\n\tobject({\n\t\ttype: literal('reject'),\n\t}),\n\tobject({\n\t\ttype: literal('resolve'),\n\t\tdata: ZkSendResponseData,\n\t}),\n]);\nexport type ZkSendResponsePayload = Output<typeof ZkSendResponsePayload>;\n\nexport const ZkSendResponse = object({\n\tid: string([uuid()]),\n\tsource: literal('zksend-channel'),\n\tpayload: ZkSendResponsePayload,\n});\nexport type ZkSendResponse = Output<typeof ZkSendResponse>;\n\nexport type ZkSendRequestTypes = Record<string, any> & {\n\t[P in ZkSendRequestData as P['type']]: P;\n};\n\nexport type ZkSendResponseTypes = {\n\t[P in ZkSendResponseData as P['type']]: P;\n};\n"],
  "mappings": "AAIA,SAAS,SAAS,QAAQ,UAAU,QAAQ,KAAK,MAAM,eAAe;AAE/D,MAAM,oBAAoB,QAAQ,QAAQ;AAAA,EAChD,OAAO;AAAA,IACN,MAAM,QAAQ,SAAS;AAAA,EACxB,CAAC;AAAA,EACD,OAAO;AAAA,IACN,MAAM,QAAQ,wBAAwB;AAAA,IACtC,MAAM,OAAO,oBAAoB;AAAA,IACjC,SAAS,OAAO,uBAAuB;AAAA,EACxC,CAAC;AAAA,EACD,OAAO;AAAA,IACN,MAAM,QAAQ,uBAAuB;AAAA,IACrC,OAAO,OAAO,qBAAqB;AAAA,IACnC,SAAS,OAAO,uBAAuB;AAAA,EACxC,CAAC;AACF,CAAC;AAGM,MAAM,gBAAgB,OAAO;AAAA,EACnC,IAAI,OAAO,oBAAoB,CAAC,KAAK,CAAC,CAAC;AAAA,EACvC,QAAQ,OAAO,CAAC,IAAI,8BAA8B,CAAC,CAAC;AAAA,EACpD,MAAM,SAAS,OAAO,CAAC;AAAA,EACvB,SAAS;AACV,CAAC;AAIM,MAAM,qBAAqB,QAAQ,QAAQ;AAAA,EACjD,OAAO;AAAA,IACN,MAAM,QAAQ,SAAS;AAAA,IACvB,SAAS,OAAO;AAAA,EACjB,CAAC;AAAA,EACD,OAAO;AAAA,IACN,MAAM,QAAQ,wBAAwB;AAAA,IACtC,OAAO,OAAO;AAAA,IACd,WAAW,OAAO;AAAA,EACnB,CAAC;AAAA,EACD,OAAO;AAAA,IACN,MAAM,QAAQ,uBAAuB;AAAA,IACrC,OAAO,OAAO;AAAA,IACd,WAAW,OAAO;AAAA,EACnB,CAAC;AACF,CAAC;AAGM,MAAM,wBAAwB,QAAQ,QAAQ;AAAA,EACpD,OAAO;AAAA,IACN,MAAM,QAAQ,QAAQ;AAAA,EACvB,CAAC;AAAA,EACD,OAAO;AAAA,IACN,MAAM,QAAQ,SAAS;AAAA,IACvB,MAAM;AAAA,EACP,CAAC;AACF,CAAC;AAGM,MAAM,iBAAiB,OAAO;AAAA,EACpC,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;AAAA,EACnB,QAAQ,QAAQ,gBAAgB;AAAA,EAChC,SAAS;AACV,CAAC;",
  "names": []
}
