import type { Output } from 'valibot';
import type { ZkSendRequestData, ZkSendResponsePayload, ZkSendResponseTypes } from './events.js';
import { ZkSendRequest, ZkSendResponse } from './events.js';
export declare const DEFAULT_ZKSEND_ORIGIN = "https://zksend.com";
export { ZkSendRequest, ZkSendResponse };
interface ZkSendPopupOptions {
    origin?: string;
    name: string;
}
export declare class ZkSendPopup {
    #private;
    constructor({ origin, name }: ZkSendPopupOptions);
    createRequest<T extends ZkSendRequestData>(request: T): Promise<ZkSendResponseTypes[T['type']]>;
    close(): void;
}
export declare class ZkSendHost {
    #private;
    constructor(request: Output<typeof ZkSendRequest>);
    static fromUrl(url?: string): ZkSendHost;
    getRequestData(): {
        id: string;
        origin: string;
        payload: {
            type: "connect";
        } | {
            address: string;
            data: string;
            type: "sign-transaction-block";
        } | {
            address: string;
            type: "sign-personal-message";
            bytes: string;
        };
        name?: string | undefined;
    };
    sendMessage(payload: ZkSendResponsePayload): void;
    close(payload?: ZkSendResponsePayload): void;
}
